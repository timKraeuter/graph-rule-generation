plugins {
    // Publishing
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'

    // Analysis & Formatting
    id 'com.diffplug.spotless' version '6.21.0'
    id 'jacoco'
    id "org.sonarqube" version "4.4.1.3373"
}

group = 'io.github.timKraeuter'
version = '1.1'


repositories {
    mavenCentral()
}

dependencies {
    // XML-marshalling not part of jdk 11 anymore.
    implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '4.0.1'
    implementation("org.glassfish.jaxb:jaxb-runtime:4.0.3")

    // Layout
    implementation 'org.eclipse.elk:org.eclipse.elk.core:0.8.1'
    implementation 'org.eclipse.elk:org.eclipse.elk.alg.layered:0.8.1'

    // Test
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}

jacocoTestReport {
    reports {
        xml.required = true
    }
}

spotless {
    java {
        googleJavaFormat()
        formatAnnotations()
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

sonar {
    properties {
        property "sonar.projectKey", "timKraeuter_graph-rule-generation"
        property "sonar.organization", "timkraeuter"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.exclusions", "src/main/java/io/github/timkraeuter/groove/gxl/**"
    }
}

tasks.named('sonar').configure {
    dependsOn jacocoTestReport
}

publishing {
    publications {
        grg(MavenPublication) {
            from components.java

            pom {
                name.set(project.name)
                description.set("A library for Groove graph transformation rule generation")
                url.set("https://github.com/timKraeuter/graph-rule-generation")
                licenses {
                    license {
                        name.set("MIT License")
                        url.set("https://github.com/timKraeuter/graph-rule-generation/blob/master/LICENSE")
                    }
                }
                developers {
                    developer {
                        id.set("tk")
                        name.set("Tim Kr√§uer")
                    }
                }
                scm {
                    url.set(
                            "https://github.com/timKraeuter/graph-rule-generation.git"
                    )
                    connection.set(
                            "scm:git:git://github.com/timKraeuter/graph-rule-generation.git"
                    )
                    developerConnection.set(
                            "scm:git:git://github.com/timKraeuter/graph-rule-generation.git"
                    )
                }
                issueManagement {
                    url.set("https://github.com/timKraeuter/graph-rule-generation/issues")
                }
            }
        }
    }
}

signing {
    def sonaTypeUsername = findProperty("SONATYPE_USERNAME")
    def signingKey = findProperty("SIGNING_KEY")
    def signingPassword = findProperty("SIGNING_PASSWORD")
    if (signingKey != null && signingPassword != null) {
        useInMemoryPgpKeys(signingKey, signingPassword)
    }
    sign publishing.publications.grg
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            def sonaTypeUsername = findProperty("SONATYPE_USERNAME")
            def sonaTypePassword = findProperty("SONATYPE_PASSWORD")
            if (sonaTypeUsername != null && sonaTypePassword != null) {
                println("Setting username and password")
                println(sonaTypeUsername.get());
                username = sonaTypeUsername.get()
                password = sonaTypePassword.get()
            }
        }
    }
}